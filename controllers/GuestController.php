<?php
/**
 * Created by PhpStorm.
 * User: medric
 * Date: 23/12/18
 * Time: 20:00
 */

namespace app\controllers;


use app\managers\RedirectionManager;
use app\models\Administrator;
use app\models\forms\AdministratorConnectionForm;
use app\models\Member;
use app\models\forms\MemberConnectionForm;
use app\models\forms\SendPassword;
use app\models\User;
use DateTime;
use InvalidArgumentException;
use Yii;
use yii\base\Module;
use yii\web\Controller;
use app\controllers\DateTimerHelper;
use app\models\forms\SendPasswordForm;
use models\PasswordResetRequestForm;
use models\ResetPasswordForm;
use models\ResendVerificationEmailForm;
use models\VerifyEmailForm;
use yii\web\BadRequestHttpException;
use yii\base\Security;


class GuestController extends Controller
{
    /********************variable  de la vue ******************************************************* */

    public $layout = "guest_base";
    public $defaultAction = "accueil";

/**************************before action******************************************* */
    public function beforeAction($action)
    {
        if (!\Yii::$app->user->getIsGuest()) {
            $user = User::findOne(Yii::$app->user->getId());
            if ($user->type === "ADMINISTRATOR") {
                Yii::$app->response->redirect("@administrator.home");
            }
            elseif($user->type === "MEMBER" ) {
                Yii::$app->response->redirect("@member.home");
            }
            else
                return RedirectionManager::abort($this);;
        }
        else {
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        }

    }
/**********************action accueil ************************************************* */
    public function actionAccueil() {
        return $this->render('home');
    }
/***********************action pour la connexion********************************************************** */
    public function actionConnexion() {
        $memberModel = new MemberConnectionForm();
        $administratorModel = new AdministratorConnectionForm();


        return $this->render('connection',['member' => $memberModel, 'administrator' => $administratorModel]);
    }


/***************************action sur les formulaires des membres ************************************************************************** */
public function actionMemberForm() {
    if (Yii::$app->request->isAjax) {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $memberModel = new MemberConnectionForm();
        $memberModel->attributes = Yii::$app->request->post();

        if ($memberModel->validate()) {
            $member = Member::findOne(['username' => $memberModel->username]);
            if ($member && $member->active) {
                $user = User::findIdentity($member->user_id);

                if ($user && $user->validatePassword($memberModel->password)) {
                    if ($memberModel->rememberMe) {
                        Yii::$app->user->login($user, 3600 * 24 * 30);
                    } else {
                        Yii::$app->user->login($user);
                    }
                    return ['success' => true, 'redirect' => Yii::$app->urlManager->createUrl('member/accueil')];
                }
            }
        }

        return ['success' => false, 'message' => 'Incorrect username or password.'];
    }
    
    return $this->redirect('@guest.connection');
}

    /**********************action sur le formulaire administrateur *************************************** */

public function actionAdministratorForm() {
    if (Yii::$app->request->isAjax) {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $administratorModel = new AdministratorConnectionForm();
        $administratorModel->attributes = Yii::$app->request->post();

        if ($administratorModel->validate()) {
            $administrator = Administrator::findOne(['username' => $administratorModel->username]);
            if ($administrator) {
                $user = User::findOne($administrator->user_id);
                if ($user && $user->validatePassword($administratorModel->password)) {
                    if ($administratorModel->remember) {
                        Yii::$app->user->login($user, 3600*24*30);
                    } else {
                        Yii::$app->user->login($user);
                    }
                    return ['success' => true, 'redirect' => Yii::$app->urlManager->createUrl('administrator/accueil')];
                }
            }
        }
        return ['success' => false, 'message' => 'Incorrect username or password.'];
    }
    return $this->redirect('@guest.connection');
}


    /***********************************requête pour de réinitialisation du mots de passe *********************************************** */
 /**
     * Requests password reset.
     *
     * @return mixed
     */
    /*public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');

                return $this->goHome();
            }

            Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');
        }

        return $this->render('requestPasswordResetToken', [
            'model' => $model,
        ]);
    }*/
/******************************action reset password ********************************************************* */
    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password saved.');

            return $this->goHome();
        }

        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }
/*****************************verify email address ***************************************************** */

 /**
     * Verify email address
     *
     * @param string $token
     * @throws BadRequestHttpException
     * @return yii\web\Response
     */
    public function actionVerifyEmail($token)
    {
        try {
            $model = new VerifyEmailForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }
        if (($user = $model->verifyEmail()) && Yii::$app->user->login($user)) {
            Yii::$app->session->setFlash('success', 'Your email has been confirmed!');
            return $this->goHome();
        }

        Yii::$app->session->setFlash('error', 'Sorry, we are unable to verify your account with provided token.');
        return $this->goHome();
    }
/**********************************resend verification ***************************************************** */
    /**
     * Resend verification email
     *
     * @return mixed
     */
    public function actionResendVerificationEmail()
    {
        $model = new ResendVerificationEmailForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');
                return $this->goHome();
            }
            Yii::$app->session->setFlash('error', 'Sorry, we are unable to resend verification email for the provided email address.');
        }

        return $this->render('resendVerificationEmail', [
            'model' => $model
        ]);
    }


    public function actionResendPassword(){
        $model = new SendPasswordForm();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            //Je n'ai qu'un champ ou j'ai demandé à l'utilisateur d'entrer soit son nom d'utilisateur soit son email et le nom de mon champs c'est username
            //Je compare donc les valeurs contenues dans mon champs soit avec l'attribut name ou email comme je ne peux pas prédire si l'utilisateur entrera soit le nom d'utilisateur soit son email
            if (User::findOne(['name' => $model->username]) || User::findOne(['email' => $model->username])) {
                $email = User::find()->select('email')
                ->where(['like','name',$model->username])
                ->orWhere(['like','email',$model->username])
                ->one();
                //Nous avons un pb les mots de passe hashés en yii sont unidirectionnels donc on ne peut pas retourner la valeur du départ du hashé
                //Ce qu'on peut faire c'est juste de reinitialiser le mot de passe 
                $security = new Security();
                $token = $security->generateRandomString(32);
                try{
                    \Yii::$app->mailer->compose()
                    ->setFrom('dylaneossombe@gmail.com')
                    ->setTo($email)

                    ->setSubject('Email sent from GI2025')
                    ->setHtmlBody(' Pensez a le modifier lors de votre premiere connexion')
                    ->send();

                }catch(\Exception $message){

                }

                return $this->render('reset_password', compact('model'));
            }
        }else {
            return RedirectionManager::abort($this);
        }
    }


}